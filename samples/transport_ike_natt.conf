# $Id: transport_ike_natt.conf

## Additional selectors for various NAT scenarios

## NAT-T TRANSPORT MODE SUPPORT IS EXPERIMENTAL ## 

## Selectors for common private IPv4 address ranges using udp port 1701
## to support connections from L2TP/IPsec clients through NAT devices

## Edit as needed if you need to support transport mode NAT traversal for other
## protocols or ports (e.g. tcp port 80 to secure http traffic)

## Please enable only what is needed for your scenario

## Currently these selectors only work for Windows clients because iphones use
## a random unprivileged port for its end of the L2TP tunnel, and racoon2's
## iked is too strict to allow a policy match to a peer that uses random ports.
## We are working on a patch to enable matching to a peer that uses random ports

## Netbsd/racoon clients do not work with these selectors, probably because the
## selectors compatible with Windows are not compatible with racoon and this 
## version of racoon2 that does strict policy matching to the peer. After
## some debugging we should be able to discover the selectors for racoon.
## A better solution would be to patch racoon2/iked to relax the policy matching
## so the same selectors can be used with multiple clients

## Android clients have not been tested yet.

## Case when peer is behind NAT and we know the peer's private IP address
## PEERS_PRIVATE_IPADDR is set in vals.conf to the peer's private IP address
## IF I am not behind NAT, set MY_PUBLIC_IPADDRESS to the same value that
## MY_IPADDRESS is set to in vals.conf, otherwise set it to my public IP address

selector ike_trans_natt_sel_out {
	direction outbound;
	src "${MY_PUBLIC_IPADDRESS}" port 1701;
	dst "${PEERS_PRIVATE_IPADDRESS}" port 1701;
	upper_layer_protocol "udp";
	policy_index ike_trans_policy;
};

selector ike_trans_natt_sel_in {
	direction inbound;
	dst "${MY_PUBLIC_IPADDRESS}" port 1701;
	src "${PEERS_PRIVATE_IPADDRESS}" port 1701;
	upper_layer_protocol "udp";
	policy_index ike_trans_policy;
};

#############################################
## Selectors for common IPv4 private address ranges from which clients connect
## from behind NAT

## Currently these do not work yet because racoon2's iked is too strict
## to allow a match from a single IP address to an address range

## We are working on a patch to relax the matching criteria in iked for
## transport mode

#selector ike_trans_natt_sel2_out {
#	direction outbound;
#	src "${MY_PUBLIC_IPADDRESS}" port 1701;
#	dst 192.168.0.0/16 port 1701;
#	upper_layer_protocol "udp";
#	policy_index ike_trans_policy;
#};

#selector ike_trans_natt_sel2_in {
#	direction inbound;
#	dst "${MY_PUBLIC_IPADDRESS}" port 1701;
#	src 192.168.0.0/16 port 1701;
#	upper_layer_protocol "udp";
#	policy_index ike_trans_policy;
#};

#selector ike_trans_natt_sel3_out {
#	direction outbound;
#	src "${MY_PUBLIC_IPADDRESS}" port 1701;
#	dst 10.0.0.0/8 port 1701;
#	upper_layer_protocol "udp";
#	policy_index ike_trans_policy;
#};

#selector ike_trans_natt_sel3_in {
#	direction inbound;
#	dst "${MY_PUBLIC_IPADDRESS}" port 1701;
#	src 10.0.0.0/8 port 1701;
#	upper_layer_protocol "udp";
#	policy_index ike_trans_policy;
#};

#selector ike_trans_natt_sel4_out {
#	direction outbound;
#	src "${MY_PUBLIC_IPADDRESS}" port 1701;
#	dst 172.16.0.0/12 port 1701;
#	upper_layer_protocol "udp";
#	policy_index ike_trans_policy;
#;

#selector ike_trans_natt_sel4_in {
#	direction inbound;
#	dst "${MY_PUBLIC_IPADDRESS}" port 1701;
#	src 172.16.0.0/12 port 1701;
#	upper_layer_protocol "udp";
#	policy_index ike_trans_policy;
#};

## Verizon's LTE network uses 100.0.0.0/8 as a private IPv4 address range
## Enable these if mobile Verizon clients cannot connect and I am not behind NAT

#selector ike_trans_natt_sel5_out {
#	direction outbound;
#	src "${MY_PUBLIC_IPADDRESS}" port 1701;
#	dst 100.0.0.0/8 port 1701;
#	upper_layer_protocol "udp";
#	policy_index ike_trans_policy;
#};

#selector ike_trans_natt_sel5_in {
#	direction inbound;
#	dst "${MY_PUBLIC_IPADDRESS}" port 1701;
#	src 100.0.0.0/8 port 1701;
#	upper_layer_protocol "udp";
#	policy_index ike_trans_policy;
#};

#############################################
## These work on Windows for the case when I am behind NAT and peer
## is not behind NAT, if MY_PUBLIC_IP_IPADDRESS is set correctly in vals.conf

selector ike_trans_natt_sel6_out {
	direction outbound;
	src "${MY_PUBLIC_IPADDRESS}" port 1701;
	dst "${PEERS_IPADDRESS}" port 1701;
	upper_layer_protocol "udp";
	policy_index ike_trans_policy;
};

selector ike_trans_natt_sel6_in {
	direction inbound;
	dst "${MY_PUBLIC_IPADDRESS}" port 1701;
	src "${PEERS_IPADDRESS}" port 1701;
	upper_layer_protocol "udp";
	policy_index ike_trans_policy;
};
